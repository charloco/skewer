// Code generated by goderive DO NOT EDIT.

package conf

// deriveCloneBaseConfig returns a clone of the src parameter.
func deriveCloneBaseConfig(src BaseConfig) BaseConfig {
	dst := new(BaseConfig)
	deriveDeepCopy(dst, &src)
	return *dst
}

// deriveDeepCopy recursively copies the contents of src into dst.
func deriveDeepCopy(dst, src *BaseConfig) {
	if src.Syslog == nil {
		dst.Syslog = nil
	} else {
		if dst.Syslog != nil {
			if len(src.Syslog) > len(dst.Syslog) {
				if cap(dst.Syslog) >= len(src.Syslog) {
					dst.Syslog = (dst.Syslog)[:len(src.Syslog)]
				} else {
					dst.Syslog = make([]SyslogConfig, len(src.Syslog))
				}
			} else if len(src.Syslog) < len(dst.Syslog) {
				dst.Syslog = (dst.Syslog)[:len(src.Syslog)]
			}
		} else {
			dst.Syslog = make([]SyslogConfig, len(src.Syslog))
		}
		copy(dst.Syslog, src.Syslog)
	}
	dst.Store = src.Store
	if src.Parsers == nil {
		dst.Parsers = nil
	} else {
		if dst.Parsers != nil {
			if len(src.Parsers) > len(dst.Parsers) {
				if cap(dst.Parsers) >= len(src.Parsers) {
					dst.Parsers = (dst.Parsers)[:len(src.Parsers)]
				} else {
					dst.Parsers = make([]ParserConfig, len(src.Parsers))
				}
			} else if len(src.Parsers) < len(dst.Parsers) {
				dst.Parsers = (dst.Parsers)[:len(src.Parsers)]
			}
		} else {
			dst.Parsers = make([]ParserConfig, len(src.Parsers))
		}
		copy(dst.Parsers, src.Parsers)
	}
	dst.Journald = src.Journald
	dst.Metrics = src.Metrics
	dst.Accounting = src.Accounting
	field := new(MainConfig)
	deriveDeepCopy_(field, &src.Main)
	dst.Main = *field
	field1 := new(KafkaDestConfig)
	deriveDeepCopy_1(field1, &src.KafkaDest)
	dst.KafkaDest = *field1
	dst.UdpDest = src.UdpDest
	dst.TcpDest = src.TcpDest
	dst.RelpDest = src.RelpDest
	dst.FileDest = src.FileDest
	dst.StderrDest = src.StderrDest
}

// deriveDeepCopy_ recursively copies the contents of src into dst.
func deriveDeepCopy_(dst, src *MainConfig) {
	dst.DirectRelp = src.DirectRelp
	dst.InputQueueSize = src.InputQueueSize
	dst.MaxInputMessageSize = src.MaxInputMessageSize
	dst.Destination = src.Destination
	if src.Dest == nil {
		dst.Dest = nil
	} else {
		if dst.Dest != nil {
			if len(src.Dest) > len(dst.Dest) {
				if cap(dst.Dest) >= len(src.Dest) {
					dst.Dest = (dst.Dest)[:len(src.Dest)]
				} else {
					dst.Dest = make([]DestinationType, len(src.Dest))
				}
			} else if len(src.Dest) < len(dst.Dest) {
				dst.Dest = (dst.Dest)[:len(src.Dest)]
			}
		} else {
			dst.Dest = make([]DestinationType, len(src.Dest))
		}
		copy(dst.Dest, src.Dest)
	}
}

// deriveDeepCopy_1 recursively copies the contents of src into dst.
func deriveDeepCopy_1(dst, src *KafkaDestConfig) {
	dst.TlsBaseConfig = src.TlsBaseConfig
	dst.BaseDestConfig = src.BaseDestConfig
	dst.Insecure = src.Insecure
	if src.Brokers == nil {
		dst.Brokers = nil
	} else {
		if dst.Brokers != nil {
			if len(src.Brokers) > len(dst.Brokers) {
				if cap(dst.Brokers) >= len(src.Brokers) {
					dst.Brokers = (dst.Brokers)[:len(src.Brokers)]
				} else {
					dst.Brokers = make([]string, len(src.Brokers))
				}
			} else if len(src.Brokers) < len(dst.Brokers) {
				dst.Brokers = (dst.Brokers)[:len(src.Brokers)]
			}
		} else {
			dst.Brokers = make([]string, len(src.Brokers))
		}
		copy(dst.Brokers, src.Brokers)
	}
	dst.ClientID = src.ClientID
	dst.Version = src.Version
	dst.ChannelBufferSize = src.ChannelBufferSize
	dst.MaxOpenRequests = src.MaxOpenRequests
	dst.DialTimeout = src.DialTimeout
	dst.ReadTimeout = src.ReadTimeout
	dst.WriteTimeout = src.WriteTimeout
	dst.KeepAlive = src.KeepAlive
	dst.MetadataRetryMax = src.MetadataRetryMax
	dst.MetadataRetryBackoff = src.MetadataRetryBackoff
	dst.MetadataRefreshFrequency = src.MetadataRefreshFrequency
	dst.MessageBytesMax = src.MessageBytesMax
	dst.RequiredAcks = src.RequiredAcks
	dst.ProducerTimeout = src.ProducerTimeout
	dst.Compression = src.Compression
	dst.FlushBytes = src.FlushBytes
	dst.FlushMessages = src.FlushMessages
	dst.FlushFrequency = src.FlushFrequency
	dst.FlushMessagesMax = src.FlushMessagesMax
	dst.RetrySendMax = src.RetrySendMax
	dst.RetrySendBackoff = src.RetrySendBackoff
	dst.Partitioner = src.Partitioner
}
