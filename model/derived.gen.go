// Code generated by goderive DO NOT EDIT.

package model

// deriveEqualSyslogMsg returns whether this and that are equal.
func deriveEqualSyslogMsg(this, that *SyslogMessage) bool {
	return (this == nil && that == nil) ||
		this != nil && that != nil &&
			this.Priority == that.Priority &&
			this.Facility == that.Facility &&
			this.Severity == that.Severity &&
			this.Version == that.Version &&
			this.TimeReportedNum == that.TimeReportedNum &&
			this.TimeGeneratedNum == that.TimeGeneratedNum &&
			this.TimeReported == that.TimeReported &&
			this.TimeGenerated == that.TimeGenerated &&
			this.Hostname == that.Hostname &&
			this.Appname == that.Appname &&
			this.Procid == that.Procid &&
			this.Msgid == that.Msgid &&
			this.Structured == that.Structured &&
			this.Message == that.Message &&
			deriveEqual(this.Properties, that.Properties)
}

// deriveEqual returns whether this and that are equal.
func deriveEqual(this, that map[string]map[string]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(deriveEqual_(v, thatv)) {
			return false
		}
	}
	return true
}

// deriveEqual_ returns whether this and that are equal.
func deriveEqual_(this, that map[string]string) bool {
	if this == nil || that == nil {
		return this == nil && that == nil
	}
	if len(this) != len(that) {
		return false
	}
	for k, v := range this {
		thatv, ok := that[k]
		if !ok {
			return false
		}
		if !(v == thatv) {
			return false
		}
	}
	return true
}
