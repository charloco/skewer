// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model/types.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model/types.proto

	It has these top-level messages:
		InnerProperties
		Properties
		SyslogMessage
		FullMessage
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_stephane_martin_skewer_utils "github.com/stephane-martin/skewer/utils"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InnerProperties struct {
	Map map[string]string `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InnerProperties) Reset()                    { *m = InnerProperties{} }
func (*InnerProperties) ProtoMessage()               {}
func (*InnerProperties) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *InnerProperties) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

type Properties struct {
	Map map[string]*InnerProperties `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Properties) Reset()                    { *m = Properties{} }
func (*Properties) ProtoMessage()               {}
func (*Properties) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Properties) GetMap() map[string]*InnerProperties {
	if m != nil {
		return m.Map
	}
	return nil
}

type SyslogMessage struct {
	Priority         Priority   `protobuf:"varint,1,opt,name=priority,proto3,casttype=Priority" json:"priority,omitempty"`
	Facility         Facility   `protobuf:"varint,2,opt,name=facility,proto3,casttype=Facility" json:"facility,omitempty"`
	Severity         Severity   `protobuf:"varint,3,opt,name=severity,proto3,casttype=Severity" json:"severity,omitempty"`
	Version          Version    `protobuf:"varint,4,opt,name=version,proto3,casttype=Version" json:"version,omitempty"`
	TimeReportedNum  int64      `protobuf:"varint,5,opt,name=time_reported_num,json=timeReportedNum,proto3" json:"time_reported_num,omitempty"`
	TimeGeneratedNum int64      `protobuf:"varint,6,opt,name=time_generated_num,json=timeGeneratedNum,proto3" json:"time_generated_num,omitempty"`
	HostName         string     `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	AppName          string     `protobuf:"bytes,8,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	ProcId           string     `protobuf:"bytes,9,opt,name=proc_id,json=procId,proto3" json:"proc_id,omitempty"`
	MsgId            string     `protobuf:"bytes,10,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Structured       string     `protobuf:"bytes,11,opt,name=structured,proto3" json:"structured,omitempty"`
	Message          string     `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	Properties       Properties `protobuf:"bytes,13,opt,name=properties" json:"properties"`
}

func (m *SyslogMessage) Reset()                    { *m = SyslogMessage{} }
func (*SyslogMessage) ProtoMessage()               {}
func (*SyslogMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *SyslogMessage) GetPriority() Priority {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SyslogMessage) GetFacility() Facility {
	if m != nil {
		return m.Facility
	}
	return 0
}

func (m *SyslogMessage) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *SyslogMessage) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SyslogMessage) GetTimeReportedNum() int64 {
	if m != nil {
		return m.TimeReportedNum
	}
	return 0
}

func (m *SyslogMessage) GetTimeGeneratedNum() int64 {
	if m != nil {
		return m.TimeGeneratedNum
	}
	return 0
}

func (m *SyslogMessage) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *SyslogMessage) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *SyslogMessage) GetProcId() string {
	if m != nil {
		return m.ProcId
	}
	return ""
}

func (m *SyslogMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *SyslogMessage) GetStructured() string {
	if m != nil {
		return m.Structured
	}
	return ""
}

func (m *SyslogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SyslogMessage) GetProperties() Properties {
	if m != nil {
		return m.Properties
	}
	return Properties{}
}

type FullMessage struct {
	Txnr   int32                                          `protobuf:"varint,1,opt,name=txnr,proto3" json:"txnr,omitempty"`
	ConnId uint32                                         `protobuf:"varint,2,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	ConfId github_com_stephane_martin_skewer_utils.MyULID `protobuf:"bytes,3,opt,name=conf_id,json=confId,proto3,customtype=github.com/stephane-martin/skewer/utils.MyULID" json:"conf_id"`
	Uid    github_com_stephane_martin_skewer_utils.MyULID `protobuf:"bytes,4,opt,name=uid,proto3,customtype=github.com/stephane-martin/skewer/utils.MyULID" json:"uid"`
	Fields *SyslogMessage                                 `protobuf:"bytes,5,opt,name=fields" json:"fields,omitempty"`
}

func (m *FullMessage) Reset()                    { *m = FullMessage{} }
func (*FullMessage) ProtoMessage()               {}
func (*FullMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *FullMessage) GetTxnr() int32 {
	if m != nil {
		return m.Txnr
	}
	return 0
}

func (m *FullMessage) GetConnId() uint32 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *FullMessage) GetFields() *SyslogMessage {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*InnerProperties)(nil), "model.InnerProperties")
	proto.RegisterType((*Properties)(nil), "model.Properties")
	proto.RegisterType((*SyslogMessage)(nil), "model.SyslogMessage")
	proto.RegisterType((*FullMessage)(nil), "model.FullMessage")
}
func (this *InnerProperties) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InnerProperties)
	if !ok {
		that2, ok := that.(InnerProperties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Map) != len(that1.Map) {
		return false
	}
	for i := range this.Map {
		if this.Map[i] != that1.Map[i] {
			return false
		}
	}
	return true
}
func (this *Properties) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Properties)
	if !ok {
		that2, ok := that.(Properties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Map) != len(that1.Map) {
		return false
	}
	for i := range this.Map {
		if !this.Map[i].Equal(that1.Map[i]) {
			return false
		}
	}
	return true
}
func (this *SyslogMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyslogMessage)
	if !ok {
		that2, ok := that.(SyslogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.Facility != that1.Facility {
		return false
	}
	if this.Severity != that1.Severity {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.TimeReportedNum != that1.TimeReportedNum {
		return false
	}
	if this.TimeGeneratedNum != that1.TimeGeneratedNum {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if this.AppName != that1.AppName {
		return false
	}
	if this.ProcId != that1.ProcId {
		return false
	}
	if this.MsgId != that1.MsgId {
		return false
	}
	if this.Structured != that1.Structured {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Properties.Equal(&that1.Properties) {
		return false
	}
	return true
}
func (this *FullMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FullMessage)
	if !ok {
		that2, ok := that.(FullMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Txnr != that1.Txnr {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if !this.ConfId.Equal(that1.ConfId) {
		return false
	}
	if !this.Uid.Equal(that1.Uid) {
		return false
	}
	if !this.Fields.Equal(that1.Fields) {
		return false
	}
	return true
}
func (this *InnerProperties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&model.InnerProperties{")
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]string{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%#v: %#v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	if this.Map != nil {
		s = append(s, "Map: "+mapStringForMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Properties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&model.Properties{")
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*InnerProperties{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%#v: %#v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	if this.Map != nil {
		s = append(s, "Map: "+mapStringForMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyslogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&model.SyslogMessage{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "Facility: "+fmt.Sprintf("%#v", this.Facility)+",\n")
	s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "TimeReportedNum: "+fmt.Sprintf("%#v", this.TimeReportedNum)+",\n")
	s = append(s, "TimeGeneratedNum: "+fmt.Sprintf("%#v", this.TimeGeneratedNum)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	s = append(s, "AppName: "+fmt.Sprintf("%#v", this.AppName)+",\n")
	s = append(s, "ProcId: "+fmt.Sprintf("%#v", this.ProcId)+",\n")
	s = append(s, "MsgId: "+fmt.Sprintf("%#v", this.MsgId)+",\n")
	s = append(s, "Structured: "+fmt.Sprintf("%#v", this.Structured)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Properties: "+strings.Replace(this.Properties.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FullMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&model.FullMessage{")
	s = append(s, "Txnr: "+fmt.Sprintf("%#v", this.Txnr)+",\n")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "ConfId: "+fmt.Sprintf("%#v", this.ConfId)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InnerProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Properties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *SyslogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyslogMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
	}
	if m.Facility != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Facility))
	}
	if m.Severity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Severity))
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
	}
	if m.TimeReportedNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeReportedNum))
	}
	if m.TimeGeneratedNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TimeGeneratedNum))
	}
	if len(m.HostName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.ProcId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProcId)))
		i += copy(dAtA[i:], m.ProcId)
	}
	if len(m.MsgId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MsgId)))
		i += copy(dAtA[i:], m.MsgId)
	}
	if len(m.Structured) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Structured)))
		i += copy(dAtA[i:], m.Structured)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	dAtA[i] = 0x6a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Properties.Size()))
	n2, err := m.Properties.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *FullMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Txnr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Txnr))
	}
	if m.ConnId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnId))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.ConfId.Size()))
	n3, err := m.ConfId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTypes(dAtA, i, uint64(m.Uid.Size()))
	n4, err := m.Uid.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.Fields != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Fields.Size()))
		n5, err := m.Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InnerProperties) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Properties) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SyslogMessage) Size() (n int) {
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if m.Facility != 0 {
		n += 1 + sovTypes(uint64(m.Facility))
	}
	if m.Severity != 0 {
		n += 1 + sovTypes(uint64(m.Severity))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	if m.TimeReportedNum != 0 {
		n += 1 + sovTypes(uint64(m.TimeReportedNum))
	}
	if m.TimeGeneratedNum != 0 {
		n += 1 + sovTypes(uint64(m.TimeGeneratedNum))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ProcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Structured)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Properties.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *FullMessage) Size() (n int) {
	var l int
	_ = l
	if m.Txnr != 0 {
		n += 1 + sovTypes(uint64(m.Txnr))
	}
	if m.ConnId != 0 {
		n += 1 + sovTypes(uint64(m.ConnId))
	}
	l = m.ConfId.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Uid.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Fields != nil {
		l = m.Fields.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InnerProperties) String() string {
	if this == nil {
		return "nil"
	}
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]string{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%v: %v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	s := strings.Join([]string{`&InnerProperties{`,
		`Map:` + mapStringForMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *Properties) String() string {
	if this == nil {
		return "nil"
	}
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*InnerProperties{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%v: %v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	s := strings.Join([]string{`&Properties{`,
		`Map:` + mapStringForMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyslogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyslogMessage{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Facility:` + fmt.Sprintf("%v", this.Facility) + `,`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`TimeReportedNum:` + fmt.Sprintf("%v", this.TimeReportedNum) + `,`,
		`TimeGeneratedNum:` + fmt.Sprintf("%v", this.TimeGeneratedNum) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`AppName:` + fmt.Sprintf("%v", this.AppName) + `,`,
		`ProcId:` + fmt.Sprintf("%v", this.ProcId) + `,`,
		`MsgId:` + fmt.Sprintf("%v", this.MsgId) + `,`,
		`Structured:` + fmt.Sprintf("%v", this.Structured) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Properties:` + strings.Replace(strings.Replace(this.Properties.String(), "Properties", "Properties", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FullMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FullMessage{`,
		`Txnr:` + fmt.Sprintf("%v", this.Txnr) + `,`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`ConfId:` + fmt.Sprintf("%v", this.ConfId) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Fields:` + strings.Replace(fmt.Sprintf("%v", this.Fields), "SyslogMessage", "SyslogMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InnerProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]*InnerProperties)
			}
			var mapkey string
			var mapvalue *InnerProperties
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InnerProperties{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyslogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyslogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyslogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (Priority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facility", wireType)
			}
			m.Facility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Facility |= (Facility(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= (Severity(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (Version(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeReportedNum", wireType)
			}
			m.TimeReportedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeReportedNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeGeneratedNum", wireType)
			}
			m.TimeGeneratedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeGeneratedNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structured", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structured = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txnr", wireType)
			}
			m.Txnr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Txnr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConfId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = &SyslogMessage{}
			}
			if err := m.Fields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xe3, 0xb8, 0xf9, 0xd1, 0x97, 0x56, 0x6d, 0x4f, 0x05, 0x4c, 0x91, 0x9c, 0xaa, 0x12,
	0x52, 0x84, 0x82, 0x23, 0x0a, 0x2a, 0x88, 0x31, 0x82, 0x42, 0x24, 0x5a, 0x2a, 0x57, 0xb0, 0x46,
	0x6e, 0x7c, 0x71, 0xad, 0xda, 0x77, 0xa7, 0xbb, 0x73, 0x20, 0x12, 0x03, 0x12, 0x1b, 0x13, 0x7f,
	0x06, 0x7f, 0x4a, 0xc7, 0x8e, 0x88, 0x21, 0x22, 0x66, 0x81, 0xad, 0x73, 0x27, 0x74, 0x67, 0x27,
	0x35, 0x3f, 0x07, 0xb6, 0x7b, 0xdf, 0xef, 0x27, 0xef, 0xd9, 0xf7, 0x7d, 0x31, 0xac, 0xc5, 0xd4,
	0xc7, 0x51, 0x47, 0x8e, 0x19, 0x16, 0x0e, 0xe3, 0x54, 0x52, 0x54, 0xd1, 0xd2, 0xc6, 0xbd, 0x11,
	0x26, 0x3e, 0xe5, 0x9d, 0x20, 0x94, 0xc7, 0xc9, 0x91, 0x33, 0xa0, 0x71, 0x27, 0xa0, 0x01, 0xed,
	0x68, 0xe8, 0x28, 0x19, 0xea, 0x4a, 0x17, 0xfa, 0x94, 0xfd, 0x78, 0xeb, 0x0d, 0xac, 0xf4, 0x08,
	0xc1, 0xfc, 0x80, 0x53, 0x86, 0xb9, 0x0c, 0xb1, 0x40, 0x77, 0xc0, 0x8c, 0x3d, 0x66, 0x19, 0x9b,
	0x66, 0xab, 0xb1, 0xdd, 0x74, 0x74, 0x77, 0xe7, 0x17, 0xc8, 0xd9, 0xf3, 0xd8, 0x63, 0x22, 0xf9,
	0xd8, 0x55, 0xec, 0xc6, 0x0e, 0xd4, 0x67, 0x02, 0x5a, 0x05, 0xf3, 0x04, 0x8f, 0x2d, 0x63, 0xd3,
	0x68, 0x2d, 0xba, 0xea, 0x88, 0xd6, 0xa1, 0x32, 0xf2, 0xa2, 0x04, 0x5b, 0x65, 0xad, 0x65, 0xc5,
	0xc3, 0xf2, 0x03, 0x63, 0xeb, 0xbd, 0x01, 0x50, 0x98, 0xdc, 0x2e, 0x4e, 0xde, 0xc8, 0x27, 0xff,
	0x75, 0xe8, 0xfe, 0x3f, 0x87, 0xb6, 0x8b, 0x43, 0x1b, 0xdb, 0x57, 0xff, 0xfc, 0x1e, 0xc5, 0x87,
	0xf9, 0x6e, 0xc2, 0xf2, 0xe1, 0x58, 0x44, 0x34, 0xd8, 0xc3, 0x42, 0x78, 0x01, 0x46, 0x2d, 0xa8,
	0x33, 0x1e, 0x52, 0x1e, 0xca, 0xac, 0x75, 0xa5, 0xbb, 0x74, 0x31, 0x69, 0xd6, 0x0f, 0x72, 0xcd,
	0x9d, 0xbb, 0x8a, 0x1c, 0x7a, 0x83, 0x30, 0x52, 0x64, 0xf9, 0x92, 0xdc, 0xcd, 0x35, 0x77, 0xee,
	0x2a, 0x52, 0xe0, 0x11, 0xd6, 0x3d, 0xcd, 0x4b, 0xf2, 0x30, 0xd7, 0xdc, 0xb9, 0x8b, 0x6e, 0x42,
	0x6d, 0x84, 0xb9, 0x08, 0x29, 0xb1, 0x16, 0x34, 0xd8, 0xb8, 0x98, 0x34, 0x6b, 0x2f, 0x33, 0xc9,
	0x9d, 0x79, 0xe8, 0x16, 0xac, 0xc9, 0x30, 0xc6, 0x7d, 0x8e, 0x19, 0xe5, 0x12, 0xfb, 0x7d, 0x92,
	0xc4, 0x56, 0x65, 0xd3, 0x68, 0x99, 0xee, 0x8a, 0x32, 0xdc, 0x5c, 0xdf, 0x4f, 0x62, 0xd4, 0x06,
	0xa4, 0xd9, 0x00, 0x13, 0xcc, 0xbd, 0x19, 0x5c, 0xd5, 0xf0, 0xaa, 0x72, 0x9e, 0xcc, 0x0c, 0x45,
	0xdf, 0x80, 0xc5, 0x63, 0x2a, 0x64, 0x9f, 0x78, 0x31, 0xb6, 0x6a, 0xfa, 0x6a, 0xeb, 0x4a, 0xd8,
	0xf7, 0x62, 0x8c, 0xae, 0x43, 0xdd, 0x63, 0x2c, 0xf3, 0xea, 0xda, 0xab, 0x79, 0x8c, 0x69, 0xeb,
	0x1a, 0xd4, 0x18, 0xa7, 0x83, 0x7e, 0xe8, 0x5b, 0x8b, 0xda, 0xa9, 0xaa, 0xb2, 0xe7, 0xa3, 0x2b,
	0x50, 0x8d, 0x45, 0xa0, 0x74, 0xc8, 0x36, 0x21, 0x16, 0x41, 0xcf, 0x47, 0x36, 0x80, 0x90, 0x3c,
	0x19, 0xc8, 0x84, 0x63, 0xdf, 0x6a, 0x68, 0xab, 0xa0, 0x20, 0x0b, 0x6a, 0x71, 0x96, 0x88, 0xb5,
	0x94, 0x4d, 0xca, 0x4b, 0x74, 0x1f, 0x80, 0xcd, 0xb3, 0xb4, 0x96, 0x75, 0xd2, 0x6b, 0xbf, 0xed,
	0x4d, 0x77, 0xe1, 0x74, 0xd2, 0x2c, 0xb9, 0x05, 0x74, 0xeb, 0x5d, 0x19, 0x1a, 0xbb, 0x49, 0x14,
	0xcd, 0x92, 0x46, 0xb0, 0x20, 0x5f, 0x13, 0x9e, 0xa5, 0xec, 0xea, 0xb3, 0x7a, 0x8d, 0x01, 0x25,
	0x44, 0x3d, 0xae, 0x8a, 0x74, 0xd9, 0xad, 0xaa, 0xb2, 0xe7, 0xa3, 0xe7, 0xda, 0x18, 0x2a, 0x43,
	0x25, 0xb8, 0xd4, 0xdd, 0x51, 0xfd, 0x3f, 0x4f, 0x9a, 0x4e, 0xe1, 0xbf, 0x27, 0x24, 0x66, 0xc7,
	0x1e, 0xc1, 0xb7, 0x63, 0x8f, 0xcb, 0x90, 0x74, 0xc4, 0x09, 0x7e, 0x85, 0x79, 0x27, 0x91, 0x61,
	0x24, 0x9c, 0xbd, 0xf1, 0x8b, 0x67, 0xbd, 0x47, 0xba, 0xe1, 0xb0, 0xe7, 0xa3, 0xa7, 0x60, 0x26,
	0xa1, 0xaf, 0x53, 0xfe, 0xff, 0x66, 0xaa, 0x05, 0x6a, 0x43, 0x75, 0x18, 0xe2, 0xc8, 0x17, 0x7a,
	0x03, 0x1a, 0xdb, 0xeb, 0xf9, 0x65, 0xfc, 0xb4, 0xd7, 0x6e, 0xce, 0x74, 0xdb, 0x67, 0x53, 0xbb,
	0xf4, 0x69, 0x6a, 0x97, 0xce, 0xa7, 0xb6, 0xf1, 0x36, 0xb5, 0x8d, 0x8f, 0xa9, 0x6d, 0x9c, 0xa6,
	0xb6, 0x71, 0x96, 0xda, 0xc6, 0x97, 0xd4, 0x36, 0xbe, 0xa5, 0x76, 0xe9, 0x3c, 0xb5, 0x8d, 0x0f,
	0x5f, 0xed, 0xd2, 0x51, 0x55, 0x7f, 0x31, 0xee, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x94, 0xed,
	0x47, 0xdd, 0x83, 0x04, 0x00, 0x00,
}
