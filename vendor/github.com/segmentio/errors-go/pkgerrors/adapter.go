package pkgerrors

import (
	pkgerrors "github.com/pkg/errors"
	"github.com/segmentio/errors-go"
)

// Adapt adapts err if it was generated by the github.com/pkg/errors package.
//
// Note that most error types for github.com/pkg/errors are compatible with the
// design of the errors-go package without needing to be modified. The only case
// where the error is actually changed is for errors with stack traces, because
// the StackTrace types are concrete types exposed by each package, and even if
// they are very similar they cannot be implicitly converted by the Go compiler.
func Adapt(err error) (error, bool) {
	switch err.(type) {
	case errorWithStack:
		return &adapter{cause: err}, true
	default:
		return err, false
	}
}

type adapter struct {
	cause error
}

func (a *adapter) Error() string {
	return a.cause.Error()
}

func (e *adapter) Cause() error {
	return e.cause
}

func (a *adapter) StackTrace() errors.StackTrace {
	e := a.cause.(errorWithStack)
	stack1 := e.StackTrace()
	stack2 := make(errors.StackTrace, len(stack1))

	for i := range stack1 {
		stack2[i] = errors.Frame(stack1[i])
	}

	return stack2
}

type errorWithStack interface {
	StackTrace() pkgerrors.StackTrace
}
